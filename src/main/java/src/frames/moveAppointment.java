/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package src.frames;


import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import src.frames.tabs.Dashboard;
import src.models.appointment;
import src.models.user;
import src.util.database;
import src.util.mail;

/**
 *
 * moveAppointment Frame
 */
public class moveAppointment extends Frame {

    /**
     * the new appointment with the updated date and time
     */
    appointment appointment;

    /**
     * the old appointment
     */
    appointment oldAppointment;

    /**
     * the current user
     */
    user user;

    /**
     * dashboard tab
     */
    Dashboard dashboard;
    /**
     * Constructor to create a new createAppointment Frame
     * @param dashboard
     * @param appointment
     * @param user
     */
    public moveAppointment(Dashboard dashboard, appointment appointment, user user) {
        this.appointment = appointment;
        this.oldAppointment = appointment;
        this.dashboard = dashboard;
        this.user = user;
        initComponents();
        lblError.setVisible(false);
        
        int minuteINT = appointment.getDateandtime().getMinute();
        int hourINT = appointment.getDateandtime().getHour();
        int monthINT = appointment.getDateandtime().getMonthValue();
        String minute = String.valueOf(minuteINT);
        String hour = String.valueOf(hourINT);
        String month = String.valueOf(monthINT);
        if(minuteINT < 10){
            minute = "0"+minute;
        }
        if(hourINT < 10){
            hour = "0"+hour;
        }
        if(monthINT < 10){
            month = "0"+month;
        }
        txtDate.setText(appointment.getDateandtime().getDayOfMonth()+"."+month+"."+appointment.getDateandtime().getYear());
        txtTime.setText(hour+":"+minute);
        txtDate.setReset(true);
        txtTime.setReset(true);
        winButton.init(this, background, false);
        dragPanel.init(this, background);
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new src.frames.components.background();
        winButton = new src.frames.components.headButton.WinButton();
        dragPanel = new src.frames.components.dragPanel();
        lblDateandtime1 = new javax.swing.JLabel();
        txtDate = new src.frames.components.textfield();
        sepTime = new javax.swing.JSeparator();
        txtTime = new src.frames.components.textfield();
        lblDateandtime = new javax.swing.JLabel();
        sepDate = new javax.swing.JSeparator();
        lblError = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        btnCancel = new src.frames.components.button();
        btnMove = new src.frames.components.button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(248, 249, 254));

        javax.swing.GroupLayout dragPanelLayout = new javax.swing.GroupLayout(dragPanel);
        dragPanel.setLayout(dragPanelLayout);
        dragPanelLayout.setHorizontalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dragPanelLayout.setVerticalGroup(
            dragPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblDateandtime1.setFont(fnt(16f));
        lblDateandtime1.setText("Time");

        txtDate.setForeground(Frame.textInput);
        txtDate.setText("dd.mm.yyyy");
        txtDate.setFont(fnt(14f));

        sepTime.setForeground(Frame.textInput);

        txtTime.setForeground(Frame.textInput);
        txtTime.setText("hh:mm");
        txtTime.setFont(fnt(14f));

        lblDateandtime.setFont(fnt(16f));
        lblDateandtime.setText("Date");

        sepDate.setForeground(Frame.textInput);

        lblError.setFont(fnt(16f));
        lblError.setForeground(new java.awt.Color(205, 61, 100));
        lblError.setText("Missing Values");

        lblHeader.setFont(fnt(20f));
        lblHeader.setText("Move Appointment");

        btnCancel.setBackground(new java.awt.Color(204, 204, 204));
        btnCancel.setText("Cancel");
        btnCancel.setFont(fnt(15f));
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCancelMousePressed(evt);
            }
        });

        btnMove.setBackground(new java.awt.Color(69, 125, 88));
        btnMove.setForeground(new java.awt.Color(255, 255, 255));
        btnMove.setText("Move");
        btnMove.setFont(fnt(15f));
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundLayout.createSequentialGroup()
                .addComponent(dragPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(winButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateandtime)
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sepDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateandtime1)
                            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sepTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMove, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblError)
                            .addComponent(lblHeader))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dragPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backgroundLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(winButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHeader)
                        .addGap(26, 26, 26)
                        .addComponent(lblDateandtime)
                        .addGap(18, 18, 18)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sepDate, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(lblDateandtime1)
                        .addGap(18, 18, 18)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sepTime, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(lblError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Cancel 
     * @param evt 
     */
    private void btnCancelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMousePressed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnCancelMousePressed
    /**
     * Move Appointment
     * @param evt 
     */
    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        lblError.setVisible(false);
        LocalDateTime old = appointment.getDateandtime();
       
        try{
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d.MM.yyyy HH:mm");
            appointment.setDateandtime(LocalDateTime.parse(txtDate.getText()+" "+txtTime.getText(), formatter));
        }catch(Exception ex){
            lblError.setText("Date or Time is in the Wrong Format");
            lblError.setVisible(true);
            return;
        }
        
        if(txtDate.getText().length() == 0 || txtTime.getText().length() == 0 || old.equals(appointment.getDateandtime()) ){
            lblError.setText("You didnt changed your Date or Time");
            lblError.setVisible(true);
            return;
        }

        if(appointment.getDateandtime().isBefore(LocalDateTime.now())){
            lblError.setText("You cant move your Appointment to the past");
            lblError.setVisible(true);
            return;
        }
        
        if(!database.shiftAppointment(appointment)){
            lblError.setText("Cant move your Appointment");
            lblError.setVisible(true);
            return;
        }
        mail.appointmentMove(appointment, user, old);
        user.removeAppointment(oldAppointment);
        user.addAppointment(appointment);
        setVisible(false);
        dispose();
        dashboard.init(user);
    }//GEN-LAST:event_btnMoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private src.frames.components.background background;
    private src.frames.components.button btnCancel;
    private src.frames.components.button btnMove;
    private src.frames.components.dragPanel dragPanel;
    private javax.swing.JLabel lblDateandtime;
    private javax.swing.JLabel lblDateandtime1;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JSeparator sepDate;
    private javax.swing.JSeparator sepTime;
    private src.frames.components.textfield txtDate;
    private src.frames.components.textfield txtTime;
    private src.frames.components.headButton.WinButton winButton;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package src.frames.tabs;

import java.awt.CardLayout;
import java.awt.Font;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.swing.table.DefaultTableModel;
import src.frames.Frame;
import src.frames.Home;
import src.models.*;
import src.util.*;



/**
 *
 * Create Appointment Tab
 */
public class createAppointment extends javax.swing.JPanel {
    
    /**
     * Create a new Frame to use the font function
     */
    Frame Frame = new Frame();

    /**
     * the current user
     */
    user user;

    /**
     * the home frame that contains this tab
     */
    Home home;

    /**
     * the new appointment
     */
    appointment newAppointment;

    /**
     * the symptom that the user selected
     */
    symptom selectedSymptom;

    /**
     * the list of all symptoms
     */
    ArrayList<symptom> symptoms;

    /**
     * list of all doctors that google maps found
     */
    ArrayList<doctor> doctors;

    /**
     * the cardlayout of the mainPanel
     */
    public CardLayout card;
    /**
     * Constructor to create a new createAppointment Tab
     */
    public createAppointment() {
        initComponents();
        Frame.dispose();
        card = (CardLayout)mainPanel.getLayout();
        background.setRound(50);
        newAppointment = new appointment();       
        lblErrorAppointmentPanel.setVisible(false);
        lblErrorDoctorPanel.setVisible(false);
        
        symptoms = database.getSymptoms();
        for (int i = 0; i < symptoms.size(); i++) {
            comboboxHealthProblem.addItem(symptoms.get(i).getName());
        }
    }
   
    /**
     * font function used to init the Componenets with a modern Font
     * @param size of the font
     * @return
     */
    public Font fnt(float size){
        return Frame.fnt(size);
    }
    
    /**
     * reset the components and init user and home
     * we cant init the values in the constructor because the netbeans gui builder doesent allow custom parameters
     * @param user
     * @param home
     */
    public void init(user user, Home home){
        this.user = user;
        this.home = home;
        lblErrorAppointmentPanel.setVisible(false);
        lblErrorDoctorPanel.setVisible(false);
        lblErrorDoctorPanel.setForeground(new java.awt.Color(205, 61, 100));
        txtDate.setReset(false);
        txtDate.setText("dd.mm.yyyy");
        txtTime.setReset(false);
        txtTime.setText("hh:mm");
        comboboxHealthProblem.setSelectedIndex(0);
        comboboxReminder.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        background = new src.frames.components.background();
        mainPanel = new javax.swing.JPanel();
        appointmentPanel = new javax.swing.JPanel();
        btnSearch = new src.frames.components.button();
        lblHealthproblem = new javax.swing.JLabel();
        sepHealthproblem = new javax.swing.JSeparator();
        lblDateandtime = new javax.swing.JLabel();
        txtDate = new src.frames.components.textfield();
        sepDate = new javax.swing.JSeparator();
        lblErrorAppointmentPanel = new javax.swing.JLabel();
        comboboxHealthProblem = new javax.swing.JComboBox<>();
        lblReminder = new javax.swing.JLabel();
        sepReminder = new javax.swing.JSeparator();
        comboboxReminder = new javax.swing.JComboBox<>();
        lblDateandtime1 = new javax.swing.JLabel();
        txtTime = new src.frames.components.textfield();
        sepTime = new javax.swing.JSeparator();
        doctorPanel = new javax.swing.JPanel();
        btnBackDoctorPanel = new src.frames.components.button();
        btnCreate = new src.frames.components.button();
        lblNearbyDoctors = new javax.swing.JLabel();
        sepSearchRadius = new javax.swing.JSeparator();
        lblErrorDoctorPanel = new javax.swing.JLabel();
        lblSearchRadius = new javax.swing.JLabel();
        sepNearbyDoctors = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNearbyDoctors = new javax.swing.JTable();
        sliderSearchRadius = new javax.swing.JSlider();
        lblSearchRadiusInt = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1033, 560));

        jPanel1.setBackground(new java.awt.Color(248, 249, 254));
        jPanel1.setFont(new java.awt.Font("Circular Std Bold", 1, 12)); // NOI18N

        background.setBackground(new java.awt.Color(255, 255, 255));

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        appointmentPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnSearch.setBackground(new java.awt.Color(69, 125, 88));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.setFont(fnt(15f));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblHealthproblem.setFont(fnt(16f));
        lblHealthproblem.setText("Health Problem");

        sepHealthproblem.setForeground(Frame.textInput);

        lblDateandtime.setFont(fnt(16f));
        lblDateandtime.setText("Date");

        txtDate.setForeground(Frame.textInput);
        txtDate.setText("dd.mm.yyyy");
        txtDate.setFont(fnt(14f));

        sepDate.setForeground(Frame.textInput);

        lblErrorAppointmentPanel.setFont(fnt(16f));
        lblErrorAppointmentPanel.setForeground(new java.awt.Color(205, 61, 100));
        lblErrorAppointmentPanel.setText("Missing Values");

        comboboxHealthProblem.setFont(fnt(12f));
        comboboxHealthProblem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Health Problem" }));

        lblReminder.setFont(fnt(16f));
        lblReminder.setText("Reminder");

        sepReminder.setForeground(Frame.textInput);

        comboboxReminder.setFont(fnt(12f));
        comboboxReminder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Reminder", "1 Week", "3 Days", "1 Hour", "10 Minutes" }));

        lblDateandtime1.setFont(fnt(16f));
        lblDateandtime1.setText("Time");

        txtTime.setForeground(Frame.textInput);
        txtTime.setText("hh:mm");
        txtTime.setFont(fnt(14f));

        sepTime.setForeground(Frame.textInput);

        javax.swing.GroupLayout appointmentPanelLayout = new javax.swing.GroupLayout(appointmentPanel);
        appointmentPanel.setLayout(appointmentPanelLayout);
        appointmentPanelLayout.setHorizontalGroup(
            appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentPanelLayout.createSequentialGroup()
                        .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblErrorAppointmentPanel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sepReminder, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sepHealthproblem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                            .addComponent(comboboxHealthProblem, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboboxReminder, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblReminder, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHealthproblem, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(appointmentPanelLayout.createSequentialGroup()
                        .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateandtime)
                            .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addComponent(sepDate, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateandtime1)
                            .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sepTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        appointmentPanelLayout.setVerticalGroup(
            appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(appointmentPanelLayout.createSequentialGroup()
                        .addComponent(lblDateandtime)
                        .addGap(18, 18, 18)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sepDate, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(appointmentPanelLayout.createSequentialGroup()
                        .addComponent(lblDateandtime1)
                        .addGap(18, 18, 18)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sepTime, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39)
                .addComponent(lblHealthproblem)
                .addGap(18, 18, 18)
                .addComponent(comboboxHealthProblem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepHealthproblem, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(lblReminder)
                .addGap(15, 15, 15)
                .addComponent(comboboxReminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(lblErrorAppointmentPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        mainPanel.add(appointmentPanel, "appointmentPanel");

        doctorPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnBackDoctorPanel.setBackground(new java.awt.Color(204, 204, 204));
        btnBackDoctorPanel.setText("Back");
        btnBackDoctorPanel.setFont(fnt(15f));
        btnBackDoctorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnBackDoctorPanelMousePressed(evt);
            }
        });

        btnCreate.setBackground(new java.awt.Color(69, 125, 88));
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Create");
        btnCreate.setFont(fnt(15f));
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCreateMousePressed(evt);
            }
        });

        lblNearbyDoctors.setFont(fnt(16f));
        lblNearbyDoctors.setText("Nearby Doctors");

        sepSearchRadius.setForeground(Frame.textInput);

        lblErrorDoctorPanel.setFont(fnt(16f));
        lblErrorDoctorPanel.setForeground(new java.awt.Color(205, 61, 100));
        lblErrorDoctorPanel.setText("Missing Values");

        lblSearchRadius.setFont(fnt(16f));
        lblSearchRadius.setText("Search Radius");

        sepNearbyDoctors.setForeground(Frame.textInput);

        tblNearbyDoctors.setFont(fnt(11f));
        tblNearbyDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNearbyDoctors.setRowHeight(20);
        tblNearbyDoctors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblNearbyDoctors);

        sliderSearchRadius.setBackground(new java.awt.Color(255, 255, 255));
        sliderSearchRadius.setFont(fnt(15f));
        sliderSearchRadius.setMajorTickSpacing(10);
        sliderSearchRadius.setMaximum(50);
        sliderSearchRadius.setMinorTickSpacing(2);
        sliderSearchRadius.setPaintLabels(true);
        sliderSearchRadius.setPaintTicks(true);
        sliderSearchRadius.setValue(15);
        sliderSearchRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSearchRadiusStateChanged(evt);
            }
        });
        sliderSearchRadius.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderSearchRadiusMouseReleased(evt);
            }
        });

        lblSearchRadiusInt.setFont(fnt(15f));
        lblSearchRadiusInt.setText("15 km");

        javax.swing.GroupLayout doctorPanelLayout = new javax.swing.GroupLayout(doctorPanel);
        doctorPanel.setLayout(doctorPanelLayout);
        doctorPanelLayout.setHorizontalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, doctorPanelLayout.createSequentialGroup()
                        .addComponent(btnBackDoctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, doctorPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sepNearbyDoctors, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(doctorPanelLayout.createSequentialGroup()
                                .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNearbyDoctors)
                                    .addComponent(lblErrorDoctorPanel)
                                    .addGroup(doctorPanelLayout.createSequentialGroup()
                                        .addComponent(lblSearchRadius)
                                        .addGap(34, 34, 34)
                                        .addComponent(sliderSearchRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSearchRadiusInt, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(sepSearchRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 39, Short.MAX_VALUE)))))
                .addGap(23, 23, 23))
        );
        doctorPanelLayout.setVerticalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(doctorPanelLayout.createSequentialGroup()
                        .addComponent(lblSearchRadius)
                        .addGap(37, 37, 37))
                    .addGroup(doctorPanelLayout.createSequentialGroup()
                        .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sepSearchRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(doctorPanelLayout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addComponent(lblSearchRadiusInt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(sliderSearchRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)))
                .addComponent(lblNearbyDoctors)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepNearbyDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblErrorDoctorPanel)
                .addGap(26, 26, 26)
                .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackDoctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        mainPanel.add(doctorPanel, "doctorPanel");

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(backgroundLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
            .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(backgroundLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)))
        );

        lblHeader.setFont(fnt(22f));
        lblHeader.setText("Create Appointment");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(lblHeader))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader)
                .addGap(21, 21, 21)
                .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Search for Doctors with the selected symptom and with a standard radius of 15km
     * Uses a new thread for the google maps query
     * @param evt 
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        lblErrorAppointmentPanel.setVisible(false);
        
        
        if(txtDate.getText().length() == 0 || !txtDate.getReset()){
            lblErrorAppointmentPanel.setText("Date is missing");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
        
        if(txtTime.getText().length() == 0 || !txtTime.getReset()){
            lblErrorAppointmentPanel.setText("Time is missing");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
        
        try{
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d.MM.yyyy HH:mm");
            newAppointment.setDateandtime(LocalDateTime.parse(txtDate.getText()+" "+txtTime.getText(), formatter));
        }catch(Exception ex){
            lblErrorAppointmentPanel.setText("Date or Time is in the Wrong Format");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
        
        if(newAppointment.getDateandtime().isBefore(LocalDateTime.now())){
            lblErrorAppointmentPanel.setText("You cant create an Appointment in the past");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
        
        if(comboboxHealthProblem.getSelectedItem().toString().equals("Select Health Problem")){
            lblErrorAppointmentPanel.setText("Select a Health Problem");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
        
        if(comboboxReminder.getSelectedItem().toString().equals("Select Reminder")){
            lblErrorAppointmentPanel.setText("Select Reminder");
            lblErrorAppointmentPanel.setVisible(true);
            return;
        }
           
        
        
        selectedSymptom = symptoms.get(comboboxHealthProblem.getSelectedIndex()-1);
        newAppointment.setHealthproblem(selectedSymptom.getName());
        
        switch(comboboxReminder.getSelectedIndex()){
            case 1 -> newAppointment.setReminder(newAppointment.getDateandtime().minusWeeks(1));
            case 2 -> newAppointment.setReminder(newAppointment.getDateandtime().minusDays(3));
            case 3 -> newAppointment.setReminder(newAppointment.getDateandtime().minusHours(1));
            case 4 -> newAppointment.setReminder(newAppointment.getDateandtime().minusMinutes(10));
        }
        
        btnSearch.setEnabled(false);
        txtDate.setEnabled(false);
        txtTime.setEnabled(false);
        comboboxHealthProblem.setEnabled(false);
        comboboxReminder.setEnabled(false);
        btnSearch.setText("Searching...");
        
       
        Thread thread = new Thread("Get Doctors") {
            public void run(){
                doctors = googlemaps.getDoctors(user, selectedSymptom, 15000);
                btnSearch.setEnabled(true);
                txtDate.setEnabled(true);
                txtTime.setEnabled(true);
                comboboxHealthProblem.setEnabled(true);
                comboboxReminder.setEnabled(true);
                btnSearch.setText("Search");

                if(doctors == null){
                    lblErrorAppointmentPanel.setText("Cant fetch Doctors from Google Maps");
                    lblErrorAppointmentPanel.setVisible(true);
                    return;
                }
                DefaultTableModel model = (DefaultTableModel) tblNearbyDoctors.getModel();
                model.setRowCount(0);
                sliderSearchRadius.setValue(15);
                for(int i = 0; i < doctors.size(); i++){
                    model.addRow(new Object[]{doctors.get(i).getName(), doctors.get(i).getAddress()});
                }
                

                card.next(mainPanel);
            }
        };
        thread.start();
    }//GEN-LAST:event_btnSearchActionPerformed
    /**
     * Go back to the previous Tab of the mainPanel
     * @param evt 
     */
    private void btnBackDoctorPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackDoctorPanelMousePressed
        card.previous(mainPanel);
    }//GEN-LAST:event_btnBackDoctorPanelMousePressed
    /**
     * Create Appointment
     * @param evt 
     */
    private void btnCreateMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMousePressed
        lblErrorDoctorPanel.setVisible(false);
        
        if(tblNearbyDoctors.getSelectedRow() == -1){
            lblErrorDoctorPanel.setText("Please select a Doctor");
            lblErrorDoctorPanel.setVisible(true);
            return;
        }
        newAppointment.setDoctor(doctors.get(tblNearbyDoctors.getSelectedRow()));
        sliderSearchRadius.setEnabled(false);
        tblNearbyDoctors.setEnabled(false);
        btnBackDoctorPanel.setEnabled(false);
        btnCreate.setEnabled(false);
        btnCreate.setText("Creating.....");
        Thread thread = new Thread("Create Appointment") {
            public void run(){
                boolean status = database.createAppointment(user, newAppointment);
                sliderSearchRadius.setEnabled(true);
                tblNearbyDoctors.setEnabled(true);
                btnBackDoctorPanel.setEnabled(true);
                btnCreate.setEnabled(true);
                btnCreate.setText("Create");
                if(!status){
                    lblErrorDoctorPanel.setText("Cant create Appointment");
                    lblErrorDoctorPanel.setVisible(true);
                    return;
                }
                mail.appointmentCreated(newAppointment, user);
                lblErrorDoctorPanel.setText("Successfully created an Appointment");
                lblErrorDoctorPanel.setForeground(new java.awt.Color(69, 125, 88));
                lblErrorDoctorPanel.setVisible(true);
                try {
                    TimeUnit.SECONDS.sleep(2);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                home.returnHome();
            }
        };
        thread.start();
        
    }//GEN-LAST:event_btnCreateMousePressed
    /**
     * Update the label with the KM
     * @param evt 
     */
    private void sliderSearchRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSearchRadiusStateChanged
        if(sliderSearchRadius.getValue()==0){
            sliderSearchRadius.setValue(1);
        }
        lblSearchRadiusInt.setText(Integer.toString(sliderSearchRadius.getValue()) + " km");
        
    }//GEN-LAST:event_sliderSearchRadiusStateChanged
    /**
     * Query the Google Maps API with the updated Radius
     * @param evt 
     */
    private void sliderSearchRadiusMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderSearchRadiusMouseReleased
        sliderSearchRadius.setEnabled(false);
        tblNearbyDoctors.setEnabled(false);
        btnBackDoctorPanel.setEnabled(false);
        btnCreate.setEnabled(false);
        DefaultTableModel model = (DefaultTableModel) tblNearbyDoctors.getModel();
        model.setRowCount(0);
        model.addRow(new Object[]{"Updating....", ".............."});
        Thread thread = new Thread("Get Doctors") {
            public void run(){
                doctors = googlemaps.getDoctors(user, selectedSymptom, sliderSearchRadius.getValue()*1000);
                
                if(doctors == null){
                    lblErrorDoctorPanel.setText("Cant fetch Doctors from Google Maps");
                    lblErrorDoctorPanel.setVisible(true);
                    return;
                }
                model.setRowCount(0);
                for(int i = 0; i < doctors.size(); i++){
                    model.addRow(new Object[]{doctors.get(i).getName(), doctors.get(i).getAddress()});
                }
                
                
                sliderSearchRadius.setEnabled(true);
                tblNearbyDoctors.setEnabled(true);
                btnBackDoctorPanel.setEnabled(true);
                btnCreate.setEnabled(true);
            }
        };
        thread.start();
    }//GEN-LAST:event_sliderSearchRadiusMouseReleased
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appointmentPanel;
    private src.frames.components.background background;
    private src.frames.components.button btnBackDoctorPanel;
    private src.frames.components.button btnCreate;
    private src.frames.components.button btnSearch;
    private javax.swing.JComboBox<String> comboboxHealthProblem;
    private javax.swing.JComboBox<String> comboboxReminder;
    private javax.swing.JPanel doctorPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateandtime;
    private javax.swing.JLabel lblDateandtime1;
    private javax.swing.JLabel lblErrorAppointmentPanel;
    private javax.swing.JLabel lblErrorDoctorPanel;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHealthproblem;
    private javax.swing.JLabel lblNearbyDoctors;
    private javax.swing.JLabel lblReminder;
    private javax.swing.JLabel lblSearchRadius;
    private javax.swing.JLabel lblSearchRadiusInt;
    public javax.swing.JPanel mainPanel;
    private javax.swing.JSeparator sepDate;
    private javax.swing.JSeparator sepHealthproblem;
    private javax.swing.JSeparator sepNearbyDoctors;
    private javax.swing.JSeparator sepReminder;
    private javax.swing.JSeparator sepSearchRadius;
    private javax.swing.JSeparator sepTime;
    private javax.swing.JSlider sliderSearchRadius;
    private javax.swing.JTable tblNearbyDoctors;
    private src.frames.components.textfield txtDate;
    private src.frames.components.textfield txtTime;
    // End of variables declaration//GEN-END:variables

    
}
